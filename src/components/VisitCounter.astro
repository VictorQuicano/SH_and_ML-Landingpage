---
// VisitCounter.astro
// Componente contador de visitas usando localStorage y API opcional

interface Props {
  pageName?: string;
  showIcon?: boolean;
  className?: string;
}

const { pageName = "página", showIcon = true, className = "" } = Astro.props;
const currentUrl = Astro.url.pathname; // Esto es SSR
---

<div 
  class={`visit-counter ${className}`} 
  id="visit-counter" 
  data-url={currentUrl} 
  data-page-name={pageName}
>
  <span class="text-black">Visitas a esta {pageName}: </span>
  <span class="counter-number" id="visit-count">0</span>
</div>

<style>
  .visit-counter {
    display: inline-flex;
    align-items: center;
    justify-content: space-between;
    gap: 0.5rem;
    padding: 0.5rem 1rem;
    background: linear-gradient(135deg, #ff930f 0%, #fff95b 100%);
    color: white;
    border-radius: 8px;
    font-family: 'Arial', sans-serif;
    font-size: 0.9rem;
    box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
    transition: transform 0.2s ease;
    width: 100%;
  }

  .visit-counter:hover {
    transform: translateY(-2px);
    box-shadow: 0 4px 15px rgba(0, 0, 0, 0.2);
  }

  .counter-number {
    font-weight: bold;
    background: rgb(56, 56, 56);
    padding: 0.2rem 0.5rem;
    border-radius: 4px;
    min-width: 2rem;
    text-align: center;
  }

  @media (max-width: 768px) {
    .visit-counter {
      font-size: 0.8rem;
    }
  }
</style>

<script>
function initVisitCounter() {
    const countElement = document.getElementById('visit-count');
    const counterContainer = document.getElementById('visit-counter');

    if (!countElement || !counterContainer) return;

    const currentUrl = counterContainer.dataset.url || '/';
    const pageName = counterContainer.dataset.pageName || 'página';
    const storageKey = `visitas_${pageName}`;

    // Inicializar en 0
    countElement.textContent = '0';

    const cachedVisitas = localStorage.getItem(storageKey);

    if (currentUrl == '/' || !cachedVisitas) {
        fetch('/api/google-visitas')
        .then(res => {
            if (!res.ok) throw new Error("Error en la respuesta de la API");
            return res.json();
        })
        .then(data => {
            const currentCount = parseInt(data.visitas || 0, 10) || 0;
            animateCounter(countElement, currentCount);
            localStorage.setItem(storageKey, currentCount);
        })
        .catch(err => {
            console.error('Error cargando visitas:', err);
            animateCounter(countElement, 0);
        });
    } else {
      countElement.textContent = cachedVisitas;
    }
}

function animateCounter(element, targetCount) {
    let displayCount = 0;
    const increment = targetCount > 50 ? Math.ceil(targetCount / 2) : 1;

    const timer = setInterval(() => {
        displayCount += increment;
        if (displayCount >= targetCount) {
            displayCount = targetCount;
            clearInterval(timer);
        }
        element.textContent = displayCount.toString();
    }, 50);
}

if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initVisitCounter);
} else {
    initVisitCounter();
}
</script>
